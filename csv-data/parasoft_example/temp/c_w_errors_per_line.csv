File,LineStart,LineEnd,Error
bit_shift.c,247,332,Duplicated function: 'void bit_shift_main ( ) { if ( vflag == 1 || vflag == 888 ) {...'
buffer_overrun_dynamic.c,27,28,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,42,43,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,62,63,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,77,78,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,94,95,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,112,113,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,130,131,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,146,147,"""buf"" may possibly be null"
buffer_overrun_dynamic.c,152,153,"Possibly accessing array ""buf[i]"" out of bounds at index [1...5]. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,164,181,Duplicated function: 'void dynamic_buffer_overrun_009 ( ) { int * buf1 = ( int * )...'
buffer_overrun_dynamic.c,174,175,"""*pbuf[0], buf1"" may possibly be null"
buffer_overrun_dynamic.c,174,175,"Possibly accessing array ""*pbuf[i]"" out of bounds at index 6. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,198,199,"Possibly accessing array ""sbuf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,218,219,"Possibly accessing array ""s"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,233,234,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,248,249,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,263,264,"Possibly accessing array ""buf"" out of bounds at index 7. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,278,279,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,298,299,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,312,313,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,333,334,"Possibly accessing array ""indexes"" out of bounds at index 4. Correct index(es): [0...3]"
buffer_overrun_dynamic.c,350,351,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,369,370,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,387,388,"Possibly accessing array ""p2"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,403,404,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,435,436,"""buf"" may possibly be null"
buffer_overrun_dynamic.c,435,436,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,443,444,"""buf"" is checked for null after being dereferenced"
buffer_overrun_dynamic.c,443,444,"Condition ""buf != 0"" always evaluates to true"
buffer_overrun_dynamic.c,462,463,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,480,481,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): 0"
buffer_overrun_dynamic.c,496,497,"Possibly accessing array ""p"" out of bounds at index 30. Correct index(es): [0...19]"
buffer_overrun_dynamic.c,506,517,Duplicated function: 'void dynamic_buffer_overrun_028 ( ) { int * buf1 = ( int * )...'
buffer_overrun_dynamic.c,512,513,"""buf1"" may possibly be null"
buffer_overrun_dynamic.c,514,515,"""buf2"" may possibly be null"
buffer_overrun_dynamic.c,514,515,"Possibly accessing array ""buf1"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_overrun_dynamic.c,532,533,"Possibly accessing array ""buf"" out of bounds at index 2. Correct index(es): 0"
buffer_overrun_dynamic.c,551,552,"""doubleptr"" may possibly be null"
buffer_overrun_dynamic.c,559,560,"Possibly accessing array ""doubleptr[i]"" out of bounds at index [1...10]. Correct index(es): [0...9]"
buffer_overrun_dynamic.c,580,581,"Possibly accessing array ""ptr1"" out of bounds at index [1...12]. Correct index(es): [0...11]"
buffer_overrun_dynamic.c,607,608,"Possibly accessing array ""ptr_s"" out of bounds at index [1...10]. Correct index(es): [0...9]"
buffer_overrun_dynamic.c,617,618,Value 33 is out of acceptable range: 'lower than 30'
buffer_overrun_dynamic.c,618,778,Duplicated function: 'void dynamic_buffer_overrun_main ( ) { if ( vflag == 1 ||...'
buffer_underrun_dynamic.c,29,30,"Possibly accessing array ""buf"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,45,46,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,65,66,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,80,81,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,97,98,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,115,116,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,133,134,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,149,150,"""buf"" may possibly be null"
buffer_underrun_dynamic.c,155,156,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,161,162,Memory not deallocated: buf[0]
buffer_underrun_dynamic.c,178,179,"Possibly accessing array ""pbuf"" out of bounds at index -3. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,202,203,"Possibly accessing array ""sbuf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,222,223,"Possibly accessing array ""s"" out of bounds at index 5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,237,238,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,268,269,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,283,284,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,303,304,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,317,318,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,338,339,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,355,356,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,374,375,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,392,393,"Possibly accessing array ""p2"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,408,409,"Possibly accessing array ""p"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,427,428,"Possibly accessing array ""p"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,439,440,"Possibly accessing array ""buf"" out of bounds at index -5. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,466,467,"Possibly accessing array ""buf"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
buffer_underrun_dynamic.c,484,485,"Possibly accessing array ""p"" out of bounds at index -10. Correct index(es): 0"
buffer_underrun_dynamic.c,500,501,"Possibly accessing array ""p"" out of bounds at index -10. Correct index(es): [0...19]"
buffer_underrun_dynamic.c,510,522,Duplicated function: 'void dynamic_buffer_underrun_028 ( ) { int * buf1 = ( int * )...'
buffer_underrun_dynamic.c,517,518,"""buf1"" may possibly be null"
buffer_underrun_dynamic.c,519,520,"""buf2"" may possibly be null"
buffer_underrun_dynamic.c,519,520,"Possibly accessing array ""buf2"" out of bounds at index -4. Correct index(es): [0...2]"
buffer_underrun_dynamic.c,532,533,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): 0"
buffer_underrun_dynamic.c,551,552,"""doubleptr"" may possibly be null"
buffer_underrun_dynamic.c,559,560,"Possibly accessing array ""doubleptr[i]"" out of bounds at index [-1...8]. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,580,581,"Possibly accessing array ""ptr1"" out of bounds at index [-1...9]. Correct index(es): [0...11]"
buffer_underrun_dynamic.c,606,607,"Possibly accessing array ""ptr_s[i].arr"" out of bounds at index -1. Correct index(es): [0...51]"
buffer_underrun_dynamic.c,621,622,"Possibly accessing array ""message"" out of bounds at index [-2...-1]. Correct index(es): [0...11]"
buffer_underrun_dynamic.c,648,649,"Possibly accessing array ""srcbuf"" out of bounds at index -1. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,669,670,"""doubleptr"" may possibly be null"
buffer_underrun_dynamic.c,671,672,"Condition ""loc1 == 0"" always evaluates to true"
buffer_underrun_dynamic.c,674,675,"Possibly accessing array ""doubleptr"" out of bounds at index -1. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,676,677,"Condition ""loc2 == 0"" always evaluates to true"
buffer_underrun_dynamic.c,679,680,"Possibly accessing array ""doubleptr[0]"" out of bounds at index -1. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,701,702,"Possibly accessing array ""newTest"" out of bounds at index -10. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,721,722,"Possibly accessing array ""doubleptr"" out of bounds at index -10. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,730,731,Memory not deallocated: doubleptr[-10]
buffer_underrun_dynamic.c,751,752,"Possibly accessing array ""new_s"" out of bounds at index -1. Correct index(es): [0...9]"
buffer_underrun_dynamic.c,791,792,Value 40 is out of acceptable range: 'lower than 30'
buffer_underrun_dynamic.c,792,988,Duplicated function: 'void dynamic_buffer_underrun_main ( ) { if ( vflag == 1 ||...'
conflicting_cond.c,24,25,"Condition ""(a == 0) && (a == 1)"" always evaluates to false"
conflicting_cond.c,24,25,"Condition ""a == 1"" always evaluates to false"
conflicting_cond.c,43,44,"Condition ""(a < 5) && (10 < a)"" always evaluates to false"
conflicting_cond.c,43,44,"Condition ""10 < a"" always evaluates to false"
conflicting_cond.c,62,63,"Condition ""((0 < a) && (a < 2)) && ((8 < a) && (a < 10))"" always evaluates to false"
conflicting_cond.c,62,63,"Condition ""8 < a"" always evaluates to false"
conflicting_cond.c,83,84,"Condition ""10 < a"" always evaluates to false"
conflicting_cond.c,103,104,"Condition ""(a == 0) && (a == 1)"" always evaluates to false"
conflicting_cond.c,103,104,"Condition ""a == 1"" always evaluates to false"
conflicting_cond.c,118,119,"Condition ""(a == 0) && (a == 1)"" always evaluates to false"
conflicting_cond.c,118,119,"Condition ""a == 0"" always evaluates to true"
conflicting_cond.c,118,119,"Condition ""a == 1"" always evaluates to false"
conflicting_cond.c,137,138,"Condition ""(a == 0) && (a == 1)"" always evaluates to false"
conflicting_cond.c,137,138,"Condition ""a == 1"" always evaluates to false"
conflicting_cond.c,157,158,"Condition ""(a < 5) && (10 < a)"" always evaluates to false"
conflicting_cond.c,157,158,"Condition ""10 < a"" always evaluates to false"
conflicting_cond.c,177,178,"Condition ""((0 < a) && (a < 2)) && ((8 < a) && (a < 10))"" always evaluates to false"
conflicting_cond.c,177,178,"Condition ""8 < a"" always evaluates to false"
conflicting_cond.c,199,200,"Condition ""(a == 0) && (a == 1)"" always evaluates to false"
conflicting_cond.c,199,200,"Condition ""a == 1"" always evaluates to false"
conflicting_cond.c,210,260,Duplicated function: 'void conflicting_cond_main ( ) { if ( vflag == 1 || vflag ==...'
data_lost.c,266,361,Duplicated function: 'void data_lost_main ( ) { if ( vflag == 1 || vflag == 888 ) {...'
data_overflow.c,360,485,Duplicated function: 'void data_overflow_main ( ) { if ( vflag == 1 || vflag == 888...'
data_underflow.c,181,241,Duplicated function: 'void data_underflow_main ( ) { if ( vflag == 1 || vflag ==...'
dead_code.c,39,40,"Condition ""flag"" always evaluates to false"
dead_code.c,60,61,"Condition ""dead_code_003_func_001()"" always evaluates to false"
dead_code.c,98,99,"Condition ""flag > 0"" always evaluates to false"
dead_code.c,115,116,"Condition ""flag == 0"" always evaluates to false"
dead_code.c,132,133,"Condition ""i > 1"" always evaluates to false"
dead_code.c,167,168,"Condition ""flag"" always evaluates to false"
dead_code.c,189,190,"Condition ""dead_code_010_func_001()"" always evaluates to false"
dead_code.c,229,230,"Condition ""flag > 0"" always evaluates to false"
dead_code.c,247,248,"Condition ""flag == 0"" always evaluates to false"
dead_code.c,262,327,Duplicated function: 'void dead_code_main ( ) { if ( vflag == 1 || vflag == 888 ) {...'
dead_lock.c,34,56,Duplicated function: 'void * dead_lock_001_tsk_001 ( void * pram ) { # if ! defined...'
dead_lock.c,44,45,"Possible deadlock - acquiring locks ""dead_lock_001_glb_mutexB"", ""dead_lock_001_glb_mutexA"" in different orders"
dead_lock.c,147,167,Duplicated function: 'void * dead_lock_002_tsk_001 ( void * pram ) { # if ! defined...'
dead_lock.c,156,157,"Possible deadlock - acquiring locks ""dead_lock_002_glb_mutexC"", ""dead_lock_002_glb_mutexB"", ""dead_lock_002_glb_mutexA"" in different orders"
dead_lock.c,170,190,Duplicated function: 'void * dead_lock_002_tsk_002 ( void * pram ) { # if ! defined...'
dead_lock.c,202,203,"Possible deadlock - acquiring locks ""dead_lock_002_glb_mutexA"", ""dead_lock_002_glb_mutexC"" in different orders"
dead_lock.c,216,236,Duplicated function: 'void dead_lock_002 ( ) { pthread_t tid1 ; pthread_t tid2 ;...'
dead_lock.c,297,339,Duplicated function: 'void * dead_lock_003_tsk_001 ( void * pram ) { # if ! defined...'
dead_lock.c,308,309,"Possible deadlock - acquiring locks ""*dead_lock_003_glb_mutexB"", ""*dead_lock_003_glb_mutexA"" in different orders"
dead_lock.c,387,404,Duplicated function: 'void dead_lock_003 ( ) { pthread_t tid1 ; pthread_t tid2 ;...'
dead_lock.c,454,496,Duplicated function: 'void * dead_lock_004_tsk_001 ( void * pram ) { # if ! defined...'
dead_lock.c,465,466,"Possible deadlock - acquiring locks ""*dead_lock_004_glb_mutexB"", ""*dead_lock_004_glb_mutexA"" in different orders"
dead_lock.c,473,474,"Possible deadlock - acquiring locks ""*dead_lock_004_glb_mutexC"", ""*dead_lock_004_glb_mutexA"" in different orders"
dead_lock.c,546,563,Duplicated function: 'void dead_lock_004 ( ) { pthread_t tid1 ; pthread_t tid2 ;...'
dead_lock.c,611,612,"Possible deadlock - acquiring locks ""*dead_lock_005_glb_mutexB"", ""*dead_lock_005_glb_mutexA"" in different orders"
dead_lock.c,734,759,Duplicated function: 'void dead_lock_main ( ) { if ( vflag == 1 || vflag == 888 ) {...'
deletion_of_data_structure_sentinel.c,26,27,"""foo"" may possibly be null"
double_free.c,22,23,"Usage of freed resource ""ptr"""
double_free.c,37,38,"""ptr"" may possibly be null"
double_free.c,43,44,"Usage of freed resource ""ptr"""
double_free.c,58,59,"""ptr"" may possibly be null"
double_free.c,64,65,"Usage of freed resource ""ptr"""
double_free.c,78,79,"""ptr"" may possibly be null"
double_free.c,87,88,"Usage of freed resource ""ptr"""
double_free.c,88,89,Memory not deallocated: ptr
double_free.c,101,102,"Usage of freed resource ""ptr"""
double_free.c,115,116,"Usage of freed resource ""ptr"""
double_free.c,128,129,"Condition ""flag >= 0"" always evaluates to true"
double_free.c,131,132,"Usage of freed resource ""ptr"""
double_free.c,149,150,"Usage of freed resource ""double_free_function_008_gbl_ptr"""
double_free.c,168,169,"Usage of freed resource ""ptr"""
double_free.c,184,185,"Usage of freed resource ""ptr"""
double_free.c,187,188,"Usage of freed resource ""ptr"""
double_free.c,203,204,"Condition ""flag == 1"" always evaluates to true"
double_free.c,204,205,"Usage of freed resource ""ptr"""
double_free.c,222,223,"Usage of freed resource ""ptr"""
double_free.c,232,293,Duplicated function: 'void double_free_main ( ) { if ( vflag == 1 || vflag == 888 )...'
double_lock.c,42,43,Lock acquired twice: double_lock_001_glb_mutex
double_lock.c,49,50,Unreleased lock: double_lock_001_glb_mutex
double_lock.c,93,94,Lock acquired twice: double_lock_002_glb_mutex
double_lock.c,98,99,Unreleased lock: double_lock_002_glb_mutex
double_lock.c,140,141,Lock acquired twice: double_lock_003_glb_mutex
double_lock.c,157,158,Unreleased lock: double_lock_003_glb_mutex
double_lock.c,201,202,Unreleased lock: double_lock_004_glb_mutex1
double_lock.c,215,216,Unreleased lock: double_lock_004_glb_mutex1
double_release.c,52,52,Loop does not contain terminate point
double_release.c,103,103,Loop does not contain terminate point
double_release.c,149,149,Loop does not contain terminate point
double_release.c,194,194,Loop does not contain terminate point
double_release.c,243,243,Loop does not contain terminate point
double_release.c,290,290,Loop does not contain terminate point
double_release.c,304,335,Duplicated function: 'void double_release_main ( ) { if ( vflag == 1 || vflag ==...'
endless_loop.c,22,22,Loop does not contain terminate point
endless_loop.c,39,40,"Condition ""i < 10"" always evaluates to true"
endless_loop.c,55,55,Loop does not contain terminate point
endless_loop.c,72,73,"Condition ""flag"" always evaluates to true"
endless_loop.c,93,94,"Condition ""endless_loop_005_func_001()"" always evaluates to true"
endless_loop.c,131,132,"Condition ""flag > 0"" always evaluates to true"
endless_loop.c,164,164,Loop does not contain terminate point
endless_loop.c,179,224,Duplicated function: 'void endless_loop_main ( ) { if ( vflag == 1 || vflag == 888...'
endless_loop.c,185,186,"Condition ""vflag == 888"" always evaluates to false"
endless_loop.c,190,191,"Condition ""vflag == 888"" always evaluates to false"
endless_loop.c,195,196,"Condition ""vflag == 888"" always evaluates to false"
endless_loop.c,200,201,"Condition ""vflag == 888"" always evaluates to false"
free_nondynamically_allocated_memory.c,22,23,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,35,36,"Condition ""flag > 0"" always evaluates to true"
free_nondynamically_allocated_memory.c,36,37,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,48,49,"Invalid resource freeing: ""free_nondynamic_allocated_memory_003_gbl_ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,62,63,"Invalid resource freeing: ""ptr"" points to a local variable"
free_nondynamically_allocated_memory.c,82,83,"""*pbuf[0], buf1"" may possibly be null"
free_nondynamically_allocated_memory.c,82,83,"""*pbuf[1], buf2"" may possibly be null"
free_nondynamically_allocated_memory.c,82,83,"""*pbuf[1], buf2"" may possibly be null"
free_nondynamically_allocated_memory.c,86,87,"Invalid resource freeing: ""pbuf"" points to a local variable"
free_nondynamically_allocated_memory.c,103,104,"Invalid resource freeing: ""ptr4"" points to a local variable"
free_nondynamically_allocated_memory.c,114,114,Loop does not contain terminate point
free_nondynamically_allocated_memory.c,115,116,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,115,116,"Usage of freed resource ""ptr"""
free_nondynamically_allocated_memory.c,127,128,"Condition ""a > b"" always evaluates to true"
free_nondynamically_allocated_memory.c,128,129,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,128,129,"Usage of freed resource ""ptr"""
free_nondynamically_allocated_memory.c,140,141,"Condition ""a < b"" always evaluates to true"
free_nondynamically_allocated_memory.c,141,142,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,141,142,"Usage of freed resource ""ptr"""
free_nondynamically_allocated_memory.c,155,156,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,170,171,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,187,188,"Invalid resource freeing: ""ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,208,209,"""new_struct"" may possibly be null"
free_nondynamically_allocated_memory.c,209,210,"Invalid resource freeing: ""new_struct->next"" points to a local variable"
free_nondynamically_allocated_memory.c,229,230,"Invalid resource freeing: ""free_nondynamic_allocated_memory_str"" points to a local variable"
free_nondynamically_allocated_memory.c,239,240,"Invalid resource freeing: ""free_nondynamic_allocated_memory_015_gbl_ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,262,263,"Invalid resource freeing: ""free_nondynamic_allocated_memory_016_gbl_ptr"" represents a string literal"
free_nondynamically_allocated_memory.c,278,358,Duplicated function: 'void free_nondynamic_allocated_memory_main ( ) { if ( vflag...'
free_null_pointer.c,34,35,"Condition ""a > 0"" always evaluates to true"
free_null_pointer.c,74,75,"""fptr"" may possibly be null"
free_null_pointer.c,109,110,"""free_null_pointer_005_gbl_ptr"" may possibly be null"
free_null_pointer.c,109,110,"""free_null_pointer_005_gbl_ptr"" may possibly be null"
free_null_pointer.c,140,141,"Condition ""free_null_pointer_006_func_001(...) == 0"" always evaluates to true"
free_null_pointer.c,144,145,"""s"" may possibly be null"
free_null_pointer.c,171,186,"Duplicated function: 'void free_null_pointer_007_func_002 ( ) { int i , j ;...'"
free_null_pointer.c,177,178,"""free_null_pointer_007_gbl_doubleptr"" may possibly be null"
free_null_pointer.c,213,214,"Condition ""free_null_pointer_007_func_001(...) != 0"" always evaluates to false"
free_null_pointer.c,241,242,"""str1"" may possibly be null"
free_null_pointer.c,241,242,"""str1"" may possibly be null"
free_null_pointer.c,275,276,"""free_null_pointer_009dst"" may possibly be null"
free_null_pointer.c,320,321,"Usage of not zero-terminated string: ""src[i]"" is uninitialized"
free_null_pointer.c,439,463,"Duplicated function: 'void free_null_pointer_012 ( ) { double * ptr = NULL , a ;...'"
free_null_pointer.c,443,444,"Condition ""free_null_pointer_012_func_001(...) == 0"" always evaluates to false"
free_null_pointer.c,443,444,"Condition ""free_null_pointer_012_func_001(1) == ZERO && MA"" always evaluates to false"
free_null_pointer.c,449,450,"Condition ""free_null_pointer_012_func_001(...) == 0"" always evaluates to true"
free_null_pointer.c,449,450,"Condition ""free_null_pointer_012_func_001(0) == ZERO && MA"" always evaluates to true"
free_null_pointer.c,451,452,"Condition ""flag == 10"" always evaluates to true"
free_null_pointer.c,452,453,"""ptr"" may possibly be null"
free_null_pointer.c,470,493,Duplicated function: 'void free_null_pointer_013 ( ) { double * fptr ; double * *...'
free_null_pointer.c,479,480,"Condition ""i >= 10"" always evaluates to false"
free_null_pointer.c,479,480,"Condition ""i>=10 && i<=100"" always evaluates to false"
free_null_pointer.c,483,484,"""fptr"" may possibly be null"
free_null_pointer.c,486,487,"Condition ""i >= 0"" always evaluates to true"
free_null_pointer.c,512,513,"Condition ""i < 1"" always evaluates to false"
free_null_pointer.c,542,543,"Condition ""i < 1"" always evaluates to false"
free_null_pointer.c,569,639,Duplicated function: 'void free_null_pointer_main ( ) { if ( vflag == 1 || vflag ==...'
func_pointer.c,101,102,"""str_rev"" may possibly be null"
func_pointer.c,103,104,"""str_rev"" may possibly be null"
func_pointer.c,117,118,"Condition ""j <= 1"" always evaluates to true"
func_pointer.c,151,152,"""doubleptr"" may possibly be null"
func_pointer.c,168,169,"Condition ""func_pointer_005_func_001(...) == 0"" always evaluates to true"
func_pointer.c,210,211,"""doubleptr"" may possibly be null"
func_pointer.c,251,252,"Condition ""func_pointer_006_func_001(...) == 0"" always evaluates to true"
func_pointer.c,338,339,"""u"" may possibly be null"
func_pointer.c,395,396,"""str_rev"" may possibly be null"
func_pointer.c,397,398,"""str_rev"" may possibly be null"
func_pointer.c,411,412,"Condition ""j <= 1"" always evaluates to true"
func_pointer.c,430,447,Duplicated function: 'int ( * func_pointer_012_func_001 ( ) ) [ 4 ] { int ( * p ) [...'
func_pointer.c,438,439,"""p"" may possibly be null"
func_pointer.c,481,482,"Condition ""flag == 1"" always evaluates to true"
func_pointer.c,526,527,"Condition ""flag == 1"" always evaluates to true"
func_pointer.c,535,536,"Condition ""flag == 1"" always evaluates to true"
func_pointer.c,601,602,"""st1"" may possibly be null"
func_pointer.c,616,692,Duplicated function: 'void func_pointer_main ( ) { if ( vflag == 1 || vflag == 888...'
func_pointer.c,622,623,"Condition ""vflag == 888"" always evaluates to false"
func_pointer.c,627,628,"Condition ""vflag == 888"" always evaluates to false"
func_pointer.c,632,633,"Condition ""vflag == 888"" always evaluates to false"
func_pointer.c,637,638,"Condition ""vflag == 888"" always evaluates to false"
function_return_value_unchecked.c,70,71,"Condition ""a > 0.0"" always evaluates to false"
function_return_value_unchecked.c,88,89,"Condition ""a != 0"" always evaluates to false"
function_return_value_unchecked.c,114,143,Duplicated function: 'void function_return_value_unchecked_004 ( ) {...'
function_return_value_unchecked.c,183,203,Duplicated function: 'float ( * function_return_value_unchecked_006_func_001 ( ) )...'
function_return_value_unchecked.c,277,278,"Condition ""a == 20"" always evaluates to false"
function_return_value_unchecked.c,282,283,"Condition ""b != 2"" always evaluates to false"
function_return_value_unchecked.c,287,288,"Condition ""c > 0"" always evaluates to false"
function_return_value_unchecked.c,289,289,"Do not use ""=="" or ""!="" to test floating-point expression"
function_return_value_unchecked.c,362,363,"Condition ""function_return_value_unchecked_013_func_001()"" always evaluates to true"
function_return_value_unchecked.c,433,433,"Do not use ""=="" or ""!="" to test floating-point expression"
function_return_value_unchecked.c,444,524,Duplicated function: 'void function_return_value_unchecked_main ( ) { if ( vflag ==...'
improper_termination_of_block.c,22,23,"Condition ""condition == 0"" always evaluates to true"
improper_termination_of_block.c,38,39,"Condition ""condition == 0"" always evaluates to true"
improper_termination_of_block.c,67,68,"Condition ""x < 10"" always evaluates to true"
invalid_extern.c,67,99,Duplicated function: 'void invalid_extern_main ( ) { if ( vflag == 1 || vflag ==...'
invalid_memory_access.c,33,34,"Condition ""flag == 10"" always evaluates to true"
invalid_memory_access.c,37,38,"Condition ""flag == 10"" always evaluates to true"
invalid_memory_access.c,39,40,"Condition ""flag == 10"" always evaluates to true"
invalid_memory_access.c,44,45,"Condition ""flag == 10"" always evaluates to true"
invalid_memory_access.c,45,46,"""ptr"" may possibly be null"
invalid_memory_access.c,45,46,"""ptr"" may possibly be null"
invalid_memory_access.c,45,46,"Usage of freed resource ""ptr"""
invalid_memory_access.c,67,68,"""dptr"" may possibly be null"
invalid_memory_access.c,67,68,"""dptr"" may possibly be null"
invalid_memory_access.c,84,85,"Usage of freed resource ""dptr"""
invalid_memory_access.c,85,86,"""a"" is used prior to initialization"
invalid_memory_access.c,105,106,"Usage of freed resource ""buf"""
invalid_memory_access.c,133,134,"Usage of freed resource ""buf"""
invalid_memory_access.c,147,148,"""ptr"" is used prior to initialization"
invalid_memory_access.c,181,182,"""*pbuf[0], buf1"" may possibly be null"
invalid_memory_access.c,188,189,"""*pbuf[1], buf2"" may possibly be null"
invalid_memory_access.c,188,189,"Usage of freed resource ""*pbuf[1], buf2"""
invalid_memory_access.c,201,202,"""ptr"" may possibly be null"
invalid_memory_access.c,210,211,"Usage of freed resource ""ptr"""
invalid_memory_access.c,224,225,"Usage of freed resource ""buf"""
invalid_memory_access.c,265,266,"""p->s1, u->s1"" may possibly be null"
invalid_memory_access.c,265,266,"""p->s1, u->s1"" may possibly be null"
invalid_memory_access.c,265,266,"""p->s1->a, u->s1->a"" may possibly be null"
invalid_memory_access.c,270,271,"Usage of freed resource ""p"""
invalid_memory_access.c,291,292,"""ptr1"" may possibly be null"
invalid_memory_access.c,294,295,"Usage of freed resource ""ptr1"""
invalid_memory_access.c,320,321,"Possibly accessing array ""ptr"" out of bounds at index >= 4. Correct index(es): [0...3]"
invalid_memory_access.c,371,372,"""s"" may possibly be null"
invalid_memory_access.c,371,372,"""s"" may possibly be null"
invalid_memory_access.c,371,372,"""s"" may possibly be null"
invalid_memory_access.c,371,372,"Usage of freed resource ""s"""
invalid_memory_access.c,371,372,"Usage of freed resource ""s"""
invalid_memory_access.c,371,372,"Usage of freed resource ""s"""
invalid_memory_access.c,432,433,"""invalid_memory_access_013_s_001_s_gbl"" may possibly be null"
invalid_memory_access.c,432,433,"""invalid_memory_access_013_s_001_s_gbl"" may possibly be null"
invalid_memory_access.c,432,433,"""invalid_memory_access_013_s_001_s_gbl"" may possibly be null"
invalid_memory_access.c,432,433,"Usage of freed resource ""invalid_memory_access_013_s_001_s_gbl"""
invalid_memory_access.c,432,433,"Usage of freed resource ""invalid_memory_access_013_s_001_s_gbl"""
invalid_memory_access.c,516,517,"Usage of freed resource ""str_rev"""
invalid_memory_access.c,554,555,"Condition ""invalid_memory_access_016_func_001(...) == 0"" always evaluates to true"
invalid_memory_access.c,559,560,"""invalid_memory_access_016_doubleptr_gbl"" may possibly be null"
invalid_memory_access.c,560,561,"""invalid_memory_access_016_doubleptr_gbl[0]"" may possibly be null"
invalid_memory_access.c,574,575,"Condition ""invalid_memory_access_016_func_001(...) == 0"" always evaluates to true"
invalid_memory_access.c,628,629,"Condition ""invalid_memory_access_017_func_001(...) == 0"" always evaluates to false"
invalid_memory_access.c,637,638,"Condition ""invalid_memory_access_017_func_001(...) == 0"" always evaluates to false"
invalid_memory_access.c,662,749,Duplicated function: 'void invalid_memory_access_main ( ) { if ( vflag == 1 ||...'
littlemem_st.c,359,414,Duplicated function: 'void littlemem_st_main ( ) { if ( vflag == 1 || vflag == 888...'
livelock.c,26,26,Loop does not contain terminate point
livelock.c,28,29,"Possible deadlock - acquiring locks ""livelock_001_glb_A"", ""livelock_001_glb_B"" in different orders"
livelock.c,32,33,Lock acquired twice: livelock_001_glb_B
livelock.c,43,43,Loop does not contain terminate point
livelock.c,49,50,Lock acquired twice: livelock_001_glb_A
lock_never_unlock.c,48,49,Unreleased lock: lock_never_unlock_001_glb_mutex
lock_never_unlock.c,93,94,Lock acquired twice: lock_never_unlock_002_glb_mutex
lock_never_unlock.c,103,104,Unreleased lock: lock_never_unlock_002_glb_mutex
lock_never_unlock.c,147,148,Lock acquired twice: lock_never_unlock_003_glb_mutex
lock_never_unlock.c,167,168,Unreleased lock: lock_never_unlock_003_glb_mutex
lock_never_unlock.c,170,181,Duplicated function: 'void lock_never_unlock_003 ( ) { # if ! defined (...'
lock_never_unlock.c,219,220,Unreleased lock: lock_never_unlock_004_glb_mutex_1
lock_never_unlock.c,271,272,Unreleased lock: lock_never_unlock_005_glb_mutex
lock_never_unlock.c,316,317,Unreleased lock: lock_never_unlock_006_glb_mutex_1
lock_never_unlock.c,342,343,"Condition ""thread_set == 1"" always evaluates to false"
lock_never_unlock.c,363,385,Duplicated function: 'void * lock_never_unlock_007_tsk_001 ( void * input ) { # if...'
lock_never_unlock.c,398,399,Lock acquired twice: lock_never_unlock_007_glb_mutex_2
lock_never_unlock.c,413,414,Unreleased lock: lock_never_unlock_007_glb_mutex_2
lock_never_unlock.c,441,462,Duplicated function: 'void * lock_never_unlock_008_tsk_001 ( void * input ) { # if...'
lock_never_unlock.c,465,486,Duplicated function: 'void * lock_never_unlock_008_tsk_002 ( void * input ) { # if...'
lock_never_unlock.c,495,496,"Condition ""thread_set == 1"" always evaluates to false"
lock_never_unlock.c,517,538,Duplicated function: 'void * lock_never_unlock_009_tsk_001 ( void * input ) { # if...'
lock_never_unlock.c,541,566,Duplicated function: 'void * lock_never_unlock_009_tsk_002 ( void * input ) { # if...'
lock_never_unlock.c,551,552,Lock acquired twice: lock_never_unlock_009_glb_mutex_2
lock_never_unlock.c,566,567,Unreleased lock: lock_never_unlock_009_glb_mutex_2
lock_never_unlock.c,588,633,Duplicated function: 'void lock_never_unlock_main ( ) { if ( vflag == 1 || vflag ==...'
main.c,17,18,Value 53 is out of acceptable range: 'lower than 30'
main.c,18,341,"Duplicated function: 'int main ( int argc , char * argv [ ] ) { if ( argv [ 1 ] ) {...'"
memory_allocation_failure.c,40,40,Loop does not contain terminate point
memory_allocation_failure.c,42,43,Memory not deallocated: buf
memory_allocation_failure.c,60,61,"Possibly accessing array ""ptr[0]"" out of bounds at index 0"
memory_allocation_failure.c,71,87,Duplicated function: 'void memory_allocation_failure_003 ( ) { unsigned int * * ptr...'
memory_allocation_failure.c,82,83,"""ptr"" may possibly be null"
memory_allocation_failure.c,82,83,"""ptr"" may possibly be null"
memory_allocation_failure.c,82,83,"Possibly accessing array ""ptr[i][0]"" out of bounds at index 0"
memory_allocation_failure.c,107,108,"Possibly accessing array ""ptr[0]"" out of bounds at index 1"
memory_allocation_failure.c,118,145,Duplicated function: 'int memory_allocation_failure_005_func_001 ( int flag ) {...'
memory_allocation_failure.c,177,178,"Condition ""memory_allocation_failure_006_func_001(...) == 0"" always evaluates to true"
memory_allocation_failure.c,182,183,"""memory_allocation_failure_006_gbl_doubleptr"" may possibly be null"
memory_allocation_failure.c,183,184,"""memory_allocation_failure_006_gbl_doubleptr[0]"" may possibly be null"
memory_allocation_failure.c,189,209,"Duplicated function: 'void memory_allocation_failure_006 ( ) { int flag = 0 , i ;...'"
memory_allocation_failure.c,192,193,"Condition ""memory_allocation_failure_006_func_001(...) == 0"" always evaluates to true"
memory_allocation_failure.c,220,221,Memory not deallocated: memory_allocation_failure_007_str_gbl
memory_allocation_failure.c,256,257,"Condition ""(unsigned int)i < 4294967294"" always evaluates to true"
memory_allocation_failure.c,262,263,"Overflow when writing to buffer ""buffer"" (char[1], 1 bytes large). Number of bytes written = -2"
memory_allocation_failure.c,269,270,Memory not deallocated: memory_allocation_failure_008_func_001(...)
memory_allocation_failure.c,282,283,Memory not deallocated: buf
memory_allocation_failure.c,321,322,Memory not deallocated: memory_allocation_failure_010_arr_gbl
memory_allocation_failure.c,323,324,"Condition ""(unsigned int)i <= 4294967295"" always evaluates to true"
memory_allocation_failure.c,386,387,"""memory_allocation_failure_011_gbl_u1"" may possibly be null"
memory_allocation_failure.c,387,388,"""memory_allocation_failure_011_gbl_u1->s1"" may possibly be null"
memory_allocation_failure.c,394,395,"""memory_allocation_failure_011_gbl_u1"" is checked for null after being dereferenced"
memory_allocation_failure.c,394,395,"Condition ""memory_allocation_failure_011_gbl_u1 != 0"" always evaluates to true"
memory_allocation_failure.c,397,398,"""memory_allocation_failure_011_gbl_u1->s1->a, p->s1->a"" may possibly be null"
memory_allocation_failure.c,421,435,Duplicated function: 'void memory_allocation_failure_012_func_002 ( int * pbuf [ ]...'
memory_allocation_failure.c,423,424,"Negative value (-1) passed to function ""calloc"""
memory_allocation_failure.c,433,434,"""pbuf[1]"" may possibly be null"
memory_allocation_failure.c,438,452,"Duplicated function: 'void memory_allocation_failure_012 ( ) { int * ptr [ 5 ] , a...'"
memory_allocation_failure.c,442,443,"Condition ""flag == 10"" always evaluates to true"
memory_allocation_failure.c,487,488,"""dptr"" may possibly be null"
memory_allocation_failure.c,493,494,"""ptr"" may possibly be null"
memory_allocation_failure.c,514,515,"""a"" is used prior to initialization"
memory_allocation_failure.c,535,536,"Overflow when writing to buffer ""p"" (int[4][0], 0 bytes large). Number of bytes written = 64"
memory_allocation_failure.c,548,620,Duplicated function: 'void memory_allocation_failure_014 ( ) { int ( * ptr1 ) [ 4 ]...'
memory_allocation_failure.c,565,566,"""dptr"" may possibly be null"
memory_allocation_failure.c,573,574,"""ptr"" may possibly be null"
memory_allocation_failure.c,654,655,"Condition ""flag == 1"" always evaluates to true"
memory_allocation_failure.c,658,659,"""memory_allocation_failure_015_gbl_ptr"" may possibly be null"
memory_allocation_failure.c,658,659,"Possibly accessing array ""memory_allocation_failure_015_gbl_ptr[0]"" out of bounds at index 1"
memory_allocation_failure.c,707,708,"""ptr1"" may possibly be null"
memory_allocation_failure.c,707,708,"Possibly accessing array ""ptr1[0]"" out of bounds at index 1"
memory_allocation_failure.c,723,803,Duplicated function: 'void memory_allocation_failure_main ( ) { if ( vflag == 1 ||...'
memory_allocation_failure.c,729,730,"Condition ""vflag == 888"" always evaluates to false"
memory_allocation_failure.c,734,735,"Condition ""vflag == 888"" always evaluates to false"
memory_leak.c,23,23,Loop does not contain terminate point
memory_leak.c,25,26,Memory not deallocated: buf
memory_leak.c,46,47,"""ptr"" may possibly be null"
memory_leak.c,56,57,Memory not deallocated: ptr[0]
memory_leak.c,73,74,"""str1"" may possibly be null"
memory_leak.c,74,75,"Memory not deallocated: str1, strcpy(...)"
memory_leak.c,96,97,"""s"" may possibly be null"
memory_leak.c,96,97,"""s"" may possibly be null"
memory_leak.c,99,100,Memory not deallocated: s[0].buf
memory_leak.c,110,111,"Condition ""flag > 0"" always evaluates to true"
memory_leak.c,118,119,"Condition ""flag < 0"" always evaluates to false"
memory_leak.c,120,121,Memory not deallocated: ptr
memory_leak.c,141,142,"Condition ""memory_leak_006_func_001(...) == 0"" always evaluates to true"
memory_leak.c,149,150,"Condition ""memory_leak_006_func_001(...) != 0"" always evaluates to false"
memory_leak.c,151,152,Memory not deallocated: dptr
memory_leak.c,159,192,Duplicated function: 'int memory_leak_007_func_001 ( int flag ) { switch ( flag ) {...'
memory_leak.c,198,199,"Condition ""ret == 0"" always evaluates to false"
memory_leak.c,215,216,Memory not deallocated: p
memory_leak.c,219,220,Memory not deallocated: p
memory_leak.c,231,232,Memory not deallocated: p
memory_leak.c,236,237,Memory not deallocated: p
memory_leak.c,247,248,Memory not deallocated: p1
memory_leak.c,249,250,"""p2"" may possibly be null"
memory_leak.c,276,277,"""un.u2"" is used prior to initialization"
memory_leak.c,278,279,"Memory not deallocated: buf, un.u1"
memory_leak.c,309,310,Memory not deallocated: p
memory_leak.c,311,312,"""p"" may possibly be null"
memory_leak.c,349,350,"""p"" may possibly be null"
memory_leak.c,353,354,Memory not deallocated: p
memory_leak.c,353,354,Memory not deallocated: p->s1
memory_leak.c,354,355,"""p->s1, u->s1"" may possibly be null"
memory_leak.c,359,360,Memory not deallocated: p
memory_leak.c,359,360,Memory not deallocated: p->s1
memory_leak.c,384,385,"Memory not deallocated: *fp1, *fp2, fptr"
memory_leak.c,404,405,Memory not deallocated: str1
memory_leak.c,424,425,"""memory_leak_0016_gbl_ptr"" may possibly be null"
memory_leak.c,424,425,"""memory_leak_0016_gbl_ptr"" may possibly be null"
memory_leak.c,443,458,"Duplicated function: 'void memory_leak_0017_func_002 ( ) { int i , j ;...'"
memory_leak.c,449,450,"""memory_leak_0017_gbl_doubleptr"" may possibly be null"
memory_leak.c,482,483,"Condition ""memory_leak_0017_func_001(...) == 0"" always evaluates to true"
memory_leak.c,504,505,"""memory_leak_0018dst"" may possibly be null"
memory_leak.c,527,528,Memory not deallocated: memory_leak_0018dst[0]
memory_leak.c,538,628,Duplicated function: 'void memory_leak_main ( ) { if ( vflag == 1 || vflag == 888 )...'
memory_leak.c,544,545,"Condition ""vflag == 888"" always evaluates to false"
not_return.c,18,18,Function 'not_return_001_func_001' should have return at the end of each execution path
not_return.c,37,37,Function 'not_return_002_func_001' should have return at the end of each execution path
not_return.c,63,63,Function 'not_return_003_func_001' should have return at the end of each execution path
null_pointer.c,23,24,"""p"" may possibly be null"
null_pointer.c,34,35,"""p"" may possibly be null"
null_pointer.c,47,48,"""*pp, p"" may possibly be null"
null_pointer.c,63,64,"""p"" may possibly be null"
null_pointer.c,94,95,"""p"" may possibly be null"
null_pointer.c,133,134,"""p"" may possibly be null"
null_pointer.c,142,143,"""p"" may possibly be null"
null_pointer.c,159,160,"""p1"" may possibly be null"
null_pointer.c,173,174,"""p2"" may possibly be null"
null_pointer.c,180,181,"""p"" may possibly be null"
null_pointer.c,192,193,"Condition ""p != 0"" always evaluates to false"
null_pointer.c,196,197,"""p"" may possibly be null"
null_pointer.c,213,214,"""p"" may possibly be null"
null_pointer.c,214,215,"""p"" is checked for null after being dereferenced"
null_pointer.c,214,215,"Condition ""p != 0"" always evaluates to true"
null_pointer.c,238,239,"""null_pointer_015_gbl_ptr"" may possibly be null"
null_pointer.c,238,239,"""null_pointer_015_gbl_ptr"" may possibly be null"
null_pointer.c,258,273,"Duplicated function: 'void null_pointer_016_func_002 ( ) { int i , j ;...'"
null_pointer.c,264,265,"""null_pointer_016_gbl_doubleptr"" may possibly be null"
null_pointer.c,298,299,"Condition ""null_pointer_016_func_001(...) != 0"" always evaluates to false"
null_pointer.c,321,322,"""null_pointer_017dst"" may possibly be null"
null_pointer.c,334,335,"""null_pointer_017dst"" may possibly be null"
null_pointer.c,355,440,Duplicated function: 'void null_pointer_main ( ) { if ( vflag == 1 || vflag == 888...'
overrun_st.c,21,22,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,32,33,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,44,45,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,55,56,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,66,67,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,77,78,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,88,89,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,99,100,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,110,111,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,126,127,"Possibly accessing array ""pbuf[4]"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,142,143,"Possibly accessing array ""sbuf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,158,159,"Possibly accessing array ""overrun_st_012_s_gbl.buf"" out of bounds at index 5. Correct index(es): [-2...4]"
overrun_st.c,169,170,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,194,195,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,206,207,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,222,223,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,233,234,"Possibly accessing array ""overrun_st_018_buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,250,251,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,264,265,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,280,281,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,293,294,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,306,307,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,320,321,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,333,334,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,346,347,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,359,360,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,372,373,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,387,388,"Possibly accessing array ""*pp"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,402,403,"Possibly accessing array ""p2"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,415,416,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,428,429,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,457,458,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,471,472,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,489,490,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,502,503,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,522,523,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,538,539,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,556,557,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,570,571,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
overrun_st.c,588,589,"Possibly accessing array ""buf"" out of bounds at index [1...5]. Correct index(es): [0...4]"
overrun_st.c,599,616,Duplicated function: 'void overrun_st_043 ( ) { int buf1 [ 6 ] ; int buf2 [ 6 ] ;...'
overrun_st.c,642,643,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,658,659,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,674,675,"Possibly accessing array ""p"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,689,690,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,706,707,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,724,725,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,749,750,"Possibly accessing array ""buf"" out of bounds at index 5. Correct index(es): [0...4]"
overrun_st.c,761,762,"Possibly accessing array ""p"" out of bounds at index 2. Correct index(es): [0...1]"
overrun_st.c,773,774,"Possibly accessing array ""p"" out of bounds at index 50. Correct index(es): [0...19]"
overrun_st.c,782,783,Value 55 is out of acceptable range: 'lower than 30'
overrun_st.c,783,1053,Duplicated function: 'void overrun_st_main ( ) { if ( vflag == 1 || vflag == 888 )...'
pow_related_errors.c,99,112,"Duplicated function: 'void pow_related_errors_005 ( ) { double arr [ ] = { 2.0 ,...'"
pow_related_errors.c,154,155,"""newarr"" may possibly be null"
pow_related_errors.c,155,156,"""ptr_newarr"" may possibly be null"
pow_related_errors.c,499,500,Value 30 is out of acceptable range: 'lower than 30'
pow_related_errors.c,500,646,Duplicated function: 'void pow_related_errors_main ( ) { if ( vflag == 1 || vflag...'
race_condition.c,71,71,Loop does not contain terminate point
race_condition.c,91,92,"""ptr"" may possibly be null"
race_condition.c,101,101,Loop does not contain terminate point
race_condition.c,416,461,Duplicated function: 'void race_condition_main ( ) { if ( vflag == 1 || vflag ==...'
redundant_cond.c,45,46,"Condition ""a < 10"" always evaluates to true"
redundant_cond.c,83,84,"Condition ""a < 10"" always evaluates to true"
redundant_cond.c,102,103,"Condition ""10 < a"" always evaluates to false"
redundant_cond.c,123,124,"Condition ""a < 10"" always evaluates to true"
redundant_cond.c,293,363,Duplicated function: 'void redundant_cond_main ( ) { if ( vflag == 1 || vflag ==...'
return_local.c,19,19,The function 'return_local_001_func_001' returns pointer to local object
sign_conv.c,272,367,Duplicated function: 'void sign_conv_main ( ) { if ( vflag == 1 || vflag == 888 ) {...'
sleep_lock.c,50,51,Call to a blocking function inside a critical section: sleep
sleep_lock.c,68,68,Loop does not contain terminate point
sleep_lock.c,122,123,Call to a blocking function inside a critical section: recv
sleep_lock.c,124,125,Call to a blocking function inside a critical section: sleep
sleep_lock.c,146,146,Loop does not contain terminate point
sleep_lock.c,173,174,Call to a blocking function inside a critical section: sleep
sleep_lock.c,200,200,Loop does not contain terminate point
st_cross_thread_access.c,74,89,Duplicated function: 'void st_cross_thread_access_001 ( ) { # if ! defined (...'
st_cross_thread_access.c,121,144,Duplicated function: 'void * st_cross_thread_access_002_tsk_001 ( void * pram ) { #...'
st_cross_thread_access.c,219,220,"Condition ""st_cross_thread_access_003_func_002(...) > 1"" always evaluates to true"
st_cross_thread_access.c,248,249,"Condition ""st_cross_thread_access_003_func_002(...) != 0"" always evaluates to true"
st_cross_thread_access.c,260,271,Duplicated function: 'void st_cross_thread_access_003 ( ) { # if ! defined (...'
st_cross_thread_access.c,296,321,Duplicated function: 'void * st_cross_thread_access_004_tsk_001 ( void * input ) {...'
st_cross_thread_access.c,377,400,Duplicated function: 'void * st_cross_thread_access_005_tsk_001 ( void * pram ) { #...'
st_cross_thread_access.c,461,483,Duplicated function: 'void * st_cross_thread_access_006_tsk_001 ( void * input ) {...'
st_cross_thread_access.c,511,529,Duplicated function: 'void st_cross_thread_access_006 ( ) { int thread_set = 0 ; #...'
st_cross_thread_access.c,517,518,"Condition ""thread_set == 1"" always evaluates to false"
st_cross_thread_access.c,537,567,Duplicated function: 'void st_cross_thread_access_main ( ) { if ( vflag == 1 ||...'
st_overflow.c,117,118,"""s"" is used prior to initialization"
st_overflow.c,143,144,"""s"" is used prior to initialization"
st_overflow.c,189,190,"""s"" is used prior to initialization"
st_overflow.c,214,215,"""s"" is used prior to initialization"
st_overflow.c,230,231,"Condition ""flag"" always evaluates to true"
st_overflow.c,247,282,Duplicated function: 'void st_overflow_main ( ) { if ( vflag == 1 || vflag == 888 )...'
st_underrun.c,131,132,"""s1"" is used prior to initialization"
st_underrun.c,160,161,"Possibly accessing array ""s.buf"" out of bounds at index <= -1. Correct index(es): [0...9]"
st_underrun.c,204,205,"Overflow when writing to buffer ""s.buf"" (char[10], 10 bytes large). Number of bytes written = 12"
st_underrun.c,207,208,"""s"" is used prior to initialization"
st_underrun.c,225,226,"Usage of not zero-terminated string: ""s->buf"""
st_underrun.c,245,246,"Condition ""flag > 1"" always evaluates to false"
st_underrun.c,262,297,Duplicated function: 'void st_underrun_main ( ) { if ( vflag == 1 || vflag == 888 )...'
underrun_st.c,21,22,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
underrun_st.c,31,32,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
underrun_st.c,42,43,"Possibly accessing array ""buf"" out of bounds at index -1. Correct index(es): [0...4]"
underrun_st.c,55,56,"Possibly accessing array ""p"" out of bounds at index -1. Correct index(es): [0...4]"
underrun_st.c,67,68,"Possibly accessing array ""p"" out of bounds at index -1. Correct index(es): [0...4]"
underrun_st.c,80,81,"Possibly accessing array ""p"" out of bounds at index -1. Correct index(es): [0...4]"
underrun_st.c,93,94,"Possibly accessing array ""buf"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
underrun_st.c,124,125,"Possibly accessing array ""underrun_st_009_gbl_buf"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
underrun_st.c,155,156,"Possibly accessing array ""underrun_st_011_gbl_buf"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
underrun_st.c,189,190,"Condition ""var == 0"" always evaluates to true"
underrun_st.c,190,191,"Possibly accessing array ""underrun_st_013_gbl_buf"" out of bounds at index [-1...3]. Correct index(es): [0...4]"
underrun_st.c,201,266,Duplicated function: 'void underrun_st_main ( ) { if ( vflag == 1 || vflag == 888 )...'
uninit_memory_access.c,27,28,"""*ret, a"" is used prior to initialization"
uninit_memory_access.c,54,55,"""str2"" is used prior to initialization"
uninit_memory_access.c,74,75,"""*ptr, p2"" may possibly be null"
uninit_memory_access.c,83,99,"Duplicated function: 'void uninit_memory_access_005 ( ) { int i , j , k ; int arr [...'"
uninit_memory_access.c,107,108,"""src"" is used prior to initialization"
uninit_memory_access.c,116,117,"""dst"" may possibly be null"
uninit_memory_access.c,120,121,"""dst"" may possibly be null"
uninit_memory_access.c,129,130,Memory not deallocated: str1
uninit_memory_access.c,200,201,"""s"" may possibly be null"
uninit_memory_access.c,201,202,Memory not deallocated: s
uninit_memory_access.c,224,225,"""uninit_memory_access_009_doubleptr_gbl"" may possibly be null"
uninit_memory_access.c,236,257,"Duplicated function: 'void uninit_memory_access_009 ( ) { int flag = 0 , i , j ; if...'"
uninit_memory_access.c,239,240,"Condition ""uninit_memory_access_009_func_001(...) == 0"" always evaluates to true"
uninit_memory_access.c,285,286,"Condition ""uninit_memory_access_010_s_001_arr_gbl->csr & ERR"" always evaluates to false"
uninit_memory_access.c,289,290,"Condition ""(int)uninit_memory_access_010_s_001_arr_gbl->csr & 3 == 0"" always evaluates to false"
uninit_memory_access.c,310,311,"""msg"" is used prior to initialization"
uninit_memory_access.c,363,364,"""s1"" may possibly be null"
uninit_memory_access.c,392,393,"""u"" may possibly be null"
uninit_memory_access.c,398,399,"""u"" may possibly be null"
uninit_memory_access.c,404,405,"""u"" may possibly be null"
uninit_memory_access.c,417,418,"Condition ""p != 0"" always evaluates to true"
uninit_memory_access.c,420,421,"Invalid resource freeing: ""p"" is defined by an integer constant"
uninit_memory_access.c,435,436,"""arr[]"" is used prior to initialization"
uninit_memory_access.c,435,436,"""p"" may possibly be null"
uninit_memory_access.c,461,536,Duplicated function: 'void uninit_memory_access_main ( ) { if ( vflag == 1 || vflag...'
uninit_pointer.c,30,31,"""p"" is used prior to initialization"
uninit_pointer.c,41,42,"""p"" is used prior to initialization"
uninit_pointer.c,55,56,"""*pp, p"" is used prior to initialization"
uninit_pointer.c,104,105,"""*pp"" is used prior to initialization"
uninit_pointer.c,131,132,"""*pbuf[0], buf2"" is used prior to initialization"
uninit_pointer.c,137,138,Memory not deallocated: buf1
uninit_pointer.c,137,138,Memory not deallocated: buf3
uninit_pointer.c,137,138,Memory not deallocated: buf4
uninit_pointer.c,137,138,Memory not deallocated: buf5
uninit_pointer.c,181,182,"Condition ""uninit_pointer_009_func_001(...) == 0"" always evaluates to false"
uninit_pointer.c,185,186,"Condition ""uninit_pointer_009_func_001(...) > 0"" always evaluates to true"
uninit_pointer.c,187,188,"""buf"" is used prior to initialization"
uninit_pointer.c,200,201,"""*((void **)cptr), *((void **)vptr)"" is used prior to initialization"
uninit_pointer.c,236,237,Memory not deallocated: ptr
uninit_pointer.c,263,284,Duplicated function: 'void uninit_pointer_013 ( ) { int * * ptr = ( int * * )...'
uninit_pointer.c,268,269,"""ptr"" may possibly be null"
uninit_pointer.c,352,353,"""ptr"" is used prior to initialization"
uninit_pointer.c,378,379,"Condition ""uninit_pointer_016_func_001(...) == 0"" always evaluates to true"
uninit_pointer.c,383,384,"""uninit_pointer_016_gbl_doubleptr"" may possibly be null"
uninit_pointer.c,385,386,"""uninit_pointer_016_gbl_doubleptr[0]"" may possibly be null"
uninit_pointer.c,394,395,"Condition ""uninit_pointer_016_func_001(...) == 0"" always evaluates to true"
uninit_pointer.c,420,500,Duplicated function: 'void uninit_pointer_main ( ) { if ( vflag == 1 || vflag ==...'
uninit_var.c,34,35,"""buf[3]"" is used prior to initialization"
uninit_var.c,45,46,"""buf[1][1]"" is used prior to initialization"
uninit_var.c,75,76,"""ret"" is used prior to initialization"
uninit_var.c,92,93,"""a"" is used prior to initialization"
uninit_var.c,92,93,"Condition ""flag == 10"" always evaluates to false"
uninit_var.c,111,112,"""s.uninit"" is used prior to initialization"
uninit_var.c,131,132,"""data"" is used prior to initialization"
uninit_var.c,142,143,"""ret[]"" is used prior to initialization"
uninit_var.c,142,143,"Usage of not zero-terminated string: ""ret"" is uninitialized"
uninit_var.c,161,162,"""ret[0][0]"" is used prior to initialization"
uninit_var.c,177,178,"""arr1[0]"" is used prior to initialization"
uninit_var.c,243,244,"""val"" is used prior to initialization"
uninit_var.c,306,381,Duplicated function: 'void uninit_var_main ( ) { if ( vflag == 1 || vflag == 888 )...'
unlock_without_lock.c,53,65,Duplicated function: 'void unlock_without_lock_001 ( ) { # if ! defined (...'
unlock_without_lock.c,117,128,Duplicated function: 'void unlock_without_lock_002 ( ) { # if ! defined (...'
unlock_without_lock.c,158,177,Duplicated function: 'void unlock_without_lock_003_func_001 ( void * pram ) { # if...'
unlock_without_lock.c,161,162,"Condition ""unlock_without_lock_003_func_002(...) > 1"" always evaluates to false"
unlock_without_lock.c,194,195,"Condition ""unlock_without_lock_003_func_002(...) > 1"" always evaluates to true"
unlock_without_lock.c,209,220,Duplicated function: 'void unlock_without_lock_003 ( ) { # if ! defined (...'
unlock_without_lock.c,405,423,Duplicated function: 'void unlock_without_lock_006 ( ) { int thread_set = 0 ; # if...'
unlock_without_lock.c,411,412,"Condition ""thread_set == 1"" always evaluates to false"
unlock_without_lock.c,433,454,Duplicated function: 'void * unlock_without_lock_007_tsk_001 ( void * input ) { #...'
unlock_without_lock.c,504,525,Duplicated function: 'void * unlock_without_lock_008_tsk_001 ( void * input ) { #...'
unlock_without_lock.c,574,614,Duplicated function: 'void unlock_without_lock_main ( ) { if ( vflag == 1 || vflag...'
unused_var.c,161,196,Duplicated function: 'void unused_var_main ( ) { if ( vflag == 1 || vflag == 888 )...'
wrong_arguments_func_pointer.c,251,252,"""st"" is used prior to initialization"
wrong_arguments_func_pointer.c,337,338,"""temp"" is used prior to initialization"
wrong_arguments_func_pointer.c,418,419,"Condition ""wrong_arguments_func_pointer_014_func_001(...) == 0"" always evaluates to true"
wrong_arguments_func_pointer.c,451,452,"""wrong_arguments_func_pointer_015_dst1_gbl"" may possibly be null"
wrong_arguments_func_pointer.c,518,519,"Condition ""flag == 1"" always evaluates to true"
wrong_arguments_func_pointer.c,526,527,"Condition ""flag == 1"" always evaluates to true"
wrong_arguments_func_pointer.c,593,594,"""st1"" may possibly be null"
wrong_arguments_func_pointer.c,609,699,Duplicated function: 'void wrong_arguments_func_pointer_main ( ) { if ( vflag == 1...'
wrong_arguments_func_pointer.c,615,616,"Condition ""vflag == 888"" always evaluates to false"
wrong_arguments_func_pointer.c,620,621,"Condition ""vflag == 888"" always evaluates to false"
wrong_arguments_func_pointer.c,625,626,"Condition ""vflag == 888"" always evaluates to false"
wrong_arguments_func_pointer.c,630,631,"Condition ""vflag == 888"" always evaluates to false"
wrong_arguments_func_pointer.c,635,636,"Condition ""vflag == 888"" always evaluates to false"
zero_division.c,23,24,Division by zero constant
zero_division.c,34,35,Division by zero constant
zero_division.c,47,48,Division by zero constant
zero_division.c,78,79,"Division by ""divisors[2]"" which may possibly be zero"
zero_division.c,118,119,"Division by ""zero_division_007_s_gbl.divisor"" which may possibly be zero"
zero_division.c,129,130,Division by zero constant
zero_division.c,141,142,"Division by ""divisor"" which may possibly be zero"
zero_division.c,166,167,"Division by ""2 * divisor - 4"" which may possibly be zero"
zero_division.c,178,179,"Division by ""divisor * divisor - 4"" which may possibly be zero"
zero_division.c,195,196,"Division by ""zero_division_013_func_001()"" which may possibly be zero"
zero_division.c,206,207,"Division by ""divisor"" which may possibly be zero"
zero_division.c,225,226,"Division by ""divisor1"" which may possibly be zero"
zero_division.c,236,237,"""zero_division_016_gbl_divisor"" may possibly be null"
zero_division.c,252,253,"Division by ""divisor2"" which may possibly be zero"
zero_division.c,261,341,Duplicated function: 'void zero_division_main ( ) { if ( vflag == 1 || vflag == 888...'
